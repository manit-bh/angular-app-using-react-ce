{"version":3,"sources":["../node_modules/@baker-hughes-central-design/ui-toolkit/dist/esm/bh-error.entry.js"],"names":["BhError","hostRef","registerInstance","this","bhEventCtaClick","createEvent","ctaClick","console","log","parseData","_ctas","ctas","JSON","parse","key","emit","_a","_b","imgSrc","test","source","getAssetPath","h","Host","class","src","errorNumber","title","description","slice","map","cta","isSmall","size","type","label","isFluid","isDisabled","isLoading","leftIcon","rightIcon","onClick","onCtaClick","style"],"mappings":"gNAIMA,EAAO,WACX,WAAYC,GAAS,oBACnBC,YAAiBC,KAAMF,GACvBE,KAAKC,gBAAkBC,YAAYF,KAAM,kBAAmB,GAC5DA,KAAKG,SAAWD,YAAYF,KAAM,WAAY,GAJrC,6CAMX,WACEI,QAAQC,MACRL,KAAKM,cARI,uBAUX,WACEN,KAAKO,MACkB,kBAAdP,KAAKQ,KACRC,KAAKC,MAAMV,KAAKQ,MAChBR,KAAKQ,OAdF,wBAgBX,SAAWG,GACTX,KAAKG,SAASS,KAAKD,GACnBX,KAAKC,gBAAgBW,KAAKD,KAlBjB,+BAoBX,WACEX,KAAKM,cArBI,oBAuBX,WAAS,IACHO,EAAIC,EADD,OAIDC,EADuB,0CACQC,KAAKhB,KAAKiB,QAE3CC,YAAalB,KAAKiB,QADlBC,YAAa,YAAD,OAAalB,KAAKiB,OAAlB,SAEhB,OAAQE,YAAEC,IAAM,CAAEC,MAAO,YAAcF,YAAE,MAAO,CAAEE,MAAO,kBAAmBC,IAAKP,IAAWI,YAAE,OAAQ,CAAEE,MAAO,oDAAsD,SAAUrB,KAAKuB,YAAa,KAAMJ,YAAE,OAAQ,CAAEE,MAAO,8CAAgDrB,KAAKwB,OAAQL,YAAE,OAAQ,CAAEE,MAAO,gDAAkDrB,KAAKyB,aAAcN,YAAE,MAAO,CAAEE,MAAO,kBAAoBrB,KAAKO,QAA2F,QAAhFO,EAA2B,QAArBD,EAAKb,KAAKO,aAA0B,IAAPM,OAAgB,EAASA,EAAGa,MAAM,EAAG,UAAuB,IAAPZ,OAAgB,EAASA,EAAGa,KAAI,SAACC,GAAD,OAAUT,YAAE,YAAa,CAAE,WAAYS,EAAIjB,IAAKkB,QAAsB,UAAbD,EAAIE,KAAiCC,KAAMH,EAAIG,KAAMC,MAAOJ,EAAII,MAAOC,SAAS,EAAMC,WAAYN,EAAIM,WAAYC,UAAWP,EAAIO,UAAWC,SAAUR,EAAIQ,SAAUC,UAAWT,EAAIS,UAAWC,QAAS,WACrxBV,EAAIM,YAER,EAAKK,WAAWX,EAAIjB,iBAjCf,uBAoCX,WAA0B,MAAO,CAAC,YApCvB,oBAqCX,WAAwB,MAAO,CAC7B,KAAQ,CAAC,kBAtCA,KAyCbd,EAAQ2C,MA3CW","file":"static/js/11.85d71272.chunk.js","sourcesContent":["import { r as registerInstance, c as createEvent, a as getAssetPath, h, H as Host } from './index-95cb0c1c.js';\n\nconst bhErrorCss = \".bh-error{display:flex;flex-direction:column;justify-content:center;align-items:center;align-self:center;max-width:370px;margin:12px}.bh-error--image{margin-bottom:var(--spacing-margin-medium);max-width:220px}.bh-error--errorNumber{color:var(--color-text-common-primary);margin-bottom:var(--spacing-margin-xxsmall)}.bh-error--title{text-align:center;color:var(--color-text-common-secondary);margin-bottom:var(--spacing-margin-xsmall)}.bh-error--description{text-align:center;color:var(--color-text-common-secondary);margin-bottom:var(--spacing-margin-medium)}.bh-error--ctas{width:201px}\";\n\nconst BhError = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.bhEventCtaClick = createEvent(this, \"bhEventCtaClick\", 7);\n    this.ctaClick = createEvent(this, \"ctaClick\", 3);\n  }\n  watchCtas() {\n    console.log();\n    this.parseData();\n  }\n  parseData() {\n    this._ctas =\n      typeof this.ctas === \"string\"\n        ? JSON.parse(this.ctas)\n        : this.ctas;\n  }\n  onCtaClick(key) {\n    this.ctaClick.emit(key);\n    this.bhEventCtaClick.emit(key);\n  }\n  componentWillLoad() {\n    this.parseData();\n  }\n  render() {\n    var _a, _b;\n    // TODO: Refine this logic to test for external URLs as well as internal paths (update illustration similarly)\n    const hasSpecialCharacters = /[ !@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/g;\n    const imgSrc = !hasSpecialCharacters.test(this.source)\n      ? getAssetPath(`./assets/${this.source}.svg`)\n      : getAssetPath(this.source);\n    return (h(Host, { class: \"bh-error\" }, h(\"img\", { class: \"bh-error--image\", src: imgSrc }), h(\"span\", { class: \"typography--headline-small bh-error--errorNumber\" }, \"Error \", this.errorNumber, \"!\"), h(\"span\", { class: \"typography--subtitle-large bh-error--title\" }, this.title), h(\"span\", { class: \"typography--body-large bh-error--description\" }, this.description), h(\"div\", { class: \"bh-error--ctas\" }, this._ctas && ((_b = (_a = this._ctas) === null || _a === void 0 ? void 0 : _a.slice(0, 1)) === null || _b === void 0 ? void 0 : _b.map((cta) => (h(\"bh-button\", { \"data-key\": cta.key, isSmall: cta.size === \"small\" ? true : false, type: cta.type, label: cta.label, isFluid: true, isDisabled: cta.isDisabled, isLoading: cta.isLoading, leftIcon: cta.leftIcon, rightIcon: cta.rightIcon, onClick: () => {\n        if (cta.isDisabled)\n          return;\n        this.onCtaClick(cta.key);\n      } })))))));\n  }\n  static get assetsDirs() { return [\"assets\"]; }\n  static get watchers() { return {\n    \"ctas\": [\"watchCtas\"]\n  }; }\n};\nBhError.style = bhErrorCss;\n\nexport { BhError as bh_error };\n"],"sourceRoot":""}